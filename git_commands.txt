
// --- Adding a new project from local to git repo -------------------------------------------------------
// create new repo in the git. init with readme file
// naviage to your local folder
git init        // will initialize an empty file
// add .gitignore file and update excluded files
git add .
git commit -m "inital commit"
git remote add origin <<remote url.git>>
// check the changes
git remote -v
git push origin master
// at this time may/will get an error 'remote changes are not updated in local' (e.g readme file)
// we need to git pull to update our branch(master) with remote(master)
git pull
// may get branch not set
git branch --set-upstream-to=origin/master master
// may get an error with unrelated histories
git pull --allow-unrelated-histories
// now update your local
git add .
git commit -m "updated readme file with master"
git push     // your git repo should have updated with your local project
// --------------------------------------------------------------------------------------------------


// --- Changin remote repo from one loc to another repo ---------------------------------------------------
// if you cloned from a repo.A and you want to push changes to repo.M
// create repo.M in git
git remote -v   // this will show existing origin. you want to change this repo.M
git remote set-url origin <<new repo.M.git url>>
git remote -v    // verify the orign is changed
git pull --allow-unrelated-histories   // you need this tag
// update any mismatches. git add .  and git commit to ensure...git pull to ensure
git push        // should push the file to new repo

// --------------------------------------------------------------------------------------------------


// --- REBASE ---------------------------------------------------------------------------------------------
// When you are working in a branch and wanted get the latest from remote to ensure you in align with remote
https://benmarshall.me/git-rebase/

// ** crate a backup branch incase changes are overwritten **
git checkout master         // goto master branch and get all latest changes
git fetch --all
git pull                    // this should get all latest from remote and your local master should equal to remote master

git checkout <<feature branch>>    // ensure all your changes have been committed
git rebase master                  // this with try to merge.
// if merge conflicts, resoleve the conflict first
// then add those merge fixes 
git add .
// then continue
git rebase --continue
// Rebase end - This should have merged latest remote changes with your local changes 
// --------------------------------------------------------------------------------------------------


// --- RESET FILE -----------------------------------------------------------------------------------
// Reset a file (COMMITTED in local) to master or remote branch
// Ensure you have the latest file in your local master branch. if not fetch from origin
git checkout <<feature branch>>
git checkout origin/master [filename]
// --------------------------------------------------------------------------------------------------


// --- MERGE between two local branches -------------------------------------------------------------
// Start a new feature
git checkout -b new-feature master
// Edit files
git commit -a -m "Start developing a feature"
// In the middle of our feature, we realize thereâ€™s a security hole in our project:
// Create a hotfix branch based off of master
git checkout -b hotfix master
// Edit files
git commit -a -m "Fix security hole"
// Merge back into master
git checkout master
git merge hotfix
git branch -d hotfix
// ------------------------------------------------------------------------------------------------

// --- push from local branch to git repo as new branch (branch not exists in git repo) ---------------
git clone <<repo.git>>            // getting the original
git checkout -b test_branch1      // 
// add changes to the files
// push to remote repo as new branch
 git push -u origin feature_branch_name
 // you can do pull request to merge the branch to the master
// -----------------------------------------------------------------------------------------------------


// --- get new code from remote branch (not master)------------------------------------------------
git clone <<repo.git>>
// cd into the folder
// check remote branch
git branch -r    // will show all the branches and master
git checkout -b <<branch_name>> origin/<<branch_name>>    // should download the code from the branch
// now make changes..
git push // should update remote repo
//------------------------------------------------------------------------------------------------


// --- MERGE additional info ----------------------------------------------------------------------
// https://git-scm.com/book/en/v2/Git-Branching-Basic-Branching-and-Merging
// ------------------------------------------------------------------------------------------------
